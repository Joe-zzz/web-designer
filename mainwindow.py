# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from paragraphInfoWin import Ui_ParagraphWin
from PyQt5 import QtCore, QtGui, QtWidgets
from SearchingColor import Ui_SearchingColor, Color
from Function import *
from Class import *
from HeadingInfoWin import Ui_HeadingInfo
from ClassWin import Ui_ClassWin
from String import Ui_String
from link import Ui_Link
from textWin import Ui_TextWin
from picture import Ui_Picture
from video import Ui_Video
from audio import Ui_Audio
class MyParagraph(QtWidgets.QDialog):
    def __init__(self, search,name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_ParagraphWin()
        self.Window.setupUi(self, search)
        self.Window.Name=name
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)

    def finish(self):
        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True#make sure that pressing finish hide the window
        self.hide()
    def CancelClick(self):
        self.hide()
    def GetParagraph(self):
        self.show()
        self.exec_()#when dialog is closed or hidden, it will continue, otherwise it will stuck here(allow user to fill in the informations)
        if self.Window.done:
            text = ''
            for z in self.Window.textlist:
                text += z
            label = MyParagraphLabel()
            if(self.Window.B_Background.int==1):
                label.setup(text, "<p>" + HtmlCoding(self.Window.Text.toPlainText(), self.Window.list) + "</p>", self.Window.textlist,
                            self.Window.FontSize.text(), self.Window.Font.currentText().split(" (")[0],
                            self.Window.Height.text(), self.Window.Width.text(), self.Window.B_Background, self.Window.background,
                            self.Window.RepeatX.isChecked(), self.Window.RepeatY.isChecked(), self.Window.C_Align.currentText(),
                            self.Window.padding.text(), self.Window.Margin.text(), self.Window.C_BorderStyle.currentText(),
                            self.Window.Border_Wid.text(), self.Window.BorderColor, self.Window.BorderRad.text(),
                            self.Window.R_Top.isChecked(), self.Window.R_Left.isChecked(), self.Window.R_Right.isChecked(),
                            self.Window.R_Bottom.isChecked(), self.Window.color)#input every information into class
            elif (self.Window.B_Background.int==0):
                label.setup(text, "<p>" + HtmlCoding(self.Window.Text.toPlainText(), self.Window.list) + "</p>",
                            self.Window.textlist,
                            self.Window.FontSize.text(), self.Window.Font.currentText().split(" (")[0],
                            self.Window.Height.text(), self.Window.Width.text(), self.Window.B_Background,
                            self.Window.backgroundImage,
                            self.Window.RepeatX.isChecked(), self.Window.RepeatY.isChecked(),
                            self.Window.C_Align.currentText(),
                            self.Window.padding.text(), self.Window.Margin.text(),
                            self.Window.C_BorderStyle.currentText(),
                            self.Window.Border_Wid.text(), self.Window.BorderColor, self.Window.BorderRad.text(),
                            self.Window.R_Top.isChecked(), self.Window.R_Left.isChecked(),
                            self.Window.R_Right.isChecked(),
                            self.Window.R_Bottom.isChecked(), self.Window.color)  # input every information into class
            else:
                label.setup(text, "<p>" + HtmlCoding(self.Window.Text.toPlainText(), self.Window.list) + "</p>",
                            self.Window.textlist,
                            self.Window.FontSize.text(), self.Window.Font.currentText().split(" (")[0],
                            self.Window.Height.text(), self.Window.Width.text(), self.Window.B_Background,
                            self.Window.background,
                            self.Window.RepeatX.isChecked(), self.Window.RepeatY.isChecked(),
                            self.Window.C_Align.currentText(),
                            self.Window.padding.text(), self.Window.Margin.text(),
                            self.Window.C_BorderStyle.currentText(),
                            self.Window.Border_Wid.text(), self.Window.BorderColor, self.Window.BorderRad.text(),
                            self.Window.R_Top.isChecked(), self.Window.R_Left.isChecked(),
                            self.Window.R_Right.isChecked(),
                            self.Window.R_Bottom.isChecked(), self.Window.color)  # input every information into class

            return label
        else:
            return False
class MyString(QtWidgets.QDialog):
    def __init__(self):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_String()
        self.Window.setupUi(self)
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)

    def finish(self):


        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True#same
        self.hide()
    def CancelClick(self):
        self.hide()
    def GetParagraph(self,Class):
        self.show()
        self.exec_()
        if self.Window.done:
            text = ''
            for z in self.Window.textlist:
                text += z
            label = ClassLabel()
            label.setup(text, "<p>" + HtmlCoding(self.Window.Text.toPlainText(), self.Window.list) + "</p>",Class, False,"")#input every information into class

            return label
        else:
            return False

class MyLink(QtWidgets.QDialog):
    def __init__(self,name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_Link()
        self.Window.setupUi(self)
        self.Window.Name=name
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)
    def getLink(self):
        self.show()
        self.exec_()
        if (self.Window.done):
            link=Link()
            link.setup(self.Window.BFile,self.Window.Text)#input every information into class
            return link
        return False


    def CancelClick(self):
        self.hide()

    def finish(self):
        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True#same
        self.hide()
class MyPicture(QtWidgets.QDialog):
    def __init__(self,Name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_Picture()
        self.Window.setupUi(self)
        self.Window.name=Name
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)
    def CancelClick(self):
        self.hide()

    def finish(self):
        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True#same
        self.hide()
    def getPicture(self):
        self.show()

        self.exec_()
        if (self.Window.done):
            if self.Window.File!="":
                picture=Picture()
                picture.setup(self.Window.File)#input every information into class

                return picture
            else:
                return False
        else:
            return False
class MyVideo(QtWidgets.QDialog):
    def __init__(self,Name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_Video()
        self.Window.setupUi(self)
        self.Window.Name=Name
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)
    def CancelClick(self):
        self.hide()

    def finish(self):
        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True
        self.hide()
    def getVideo(self):
        self.show()
        self.exec_()
        if (self.Window.done):
            if self.Window.File!="":
                video=Video()
                video.setup(self.Window.File)
                return video
            else:
                return False
        else:
            return False

class MyAudio(QtWidgets.QDialog):
    def __init__(self,Name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_Audio()
        self.Window.setupUi(self)
        self.Window.Name=Name
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)
    def CancelClick(self):
        self.hide()

    def finish(self):
        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True#same
        self.hide()
    def getVideo(self):
        self.show()
        self.exec_()
        if (self.Window.done):
            if self.Window.File!="":
                audio=Audio()
                audio.setup(self.Window.File)#input address into class
                return audio
            else:
                return False
        else:
            return False

class MyTextWin(QtWidgets.QDialog):
    def __init__(self,Window,Name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_TextWin()
        self.Window.setupUi(self,Window)
        self.Window.Name=Name
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)
    def getLabel(self):
        self.show()

        self.exec_()
        if (self.Window.done):
            if self.Window.TextFile!="":
                label=ClassLabel()
                label.setup(self.Window.text,"<p> {}</p>".format(self.Window.text),self.Window.Window.ClassList.get(self.Window.class_2.currentIndex()).node,True,self.Window.TextFile)
                label.type="textFileLabel"
                return label
            else:
                return False
        else:
            return False


    def CancelClick(self):
        self.hide()

    def finish(self):
        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True
        self.hide()
class MyClass(QtWidgets.QDialog):
    def __init__(self, search,name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_ClassWin()
        self.Window.setupUi(self, search)
        self.Window.name=name
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)
    def GetClassNode(self):
        self.show()
        self.exec_()
        if(self.Window.done):
            label = ClassWin()
            label.setup(self.Window.Name.text(),
                               self.Window.FontSize.text(), self.Window.Font.currentText().split(" (")[0],self.Window.B_Background,
                               self.Window.background,
                               self.Window.RepeatX.isChecked(), self.Window.RepeatY.isChecked(),
                               self.Window.C_Align.currentText(),
                               self.Window.padding.text(), self.Window.Margin.text(),
                               self.Window.C_BorderStyle.currentText(),
                               self.Window.Border_Wid.text(), self.Window.BorderColor, self.Window.BorderRad.text(),
                               self.Window.R_Top.isChecked(), self.Window.R_Left.isChecked(),
                               self.Window.R_Right.isChecked(),
                               self.Window.R_Bottom.isChecked(), self.Window.color)
            return label
        return False
    def CancelClick(self):
        self.hide()
    def finish(self):
        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True
        self.hide()
class MyHeading(QtWidgets.QDialog):
    def __init__(self, search,name):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_HeadingInfo()
        self.Window.setupUi(self, search)
        self.Window.Finish.clicked.connect(self.finish)
        self.Window.Cancel.clicked.connect(self.CancelClick)
        self.Window.name=name
    def CancelClick(self):
        self.hide()
    def finish(self):


        # (self, FontSize, Font, Height, Width, B_Background, Background, Repeatx, Repeaty, TextAlign, Padding, Margin,#BorderStyle, BorderWidth, BorderColor, BorderRadius, Top, Left, Right, Bottom, color):
        self.Window.done = True
        self.hide()
    def GetHeading(self):
        self.show()
        self.exec_()
        if self.Window.done:
            text = ''
            for z in self.Window.textlist:
                text += z
            label = MyHeadingLabel()
            if (self.Window.B_Background.int==0):
                label.setup(text, "<"+self.Window.Size.currentText()+">" + HtmlCoding(self.Window.Text.toPlainText(), self.Window.list)+"</"+self.Window.Size.currentText()+">", self.Window.textlist,
                            self.Window.Size.currentText(), self.Window.C_Font.currentText().split(" (")[0],
                            self.Window.Height.text(), self.Window.Width.text(), self.Window.B_Background, self.Window.background,
                            self.Window.RepeatX.isChecked(), self.Window.RepeatY.isChecked(), self.Window.C_Align.currentText(),
                            self.Window.padding_2.text(), self.Window.Margin.text(), self.Window.C_BorderStyle.currentText(),
                            self.Window.Border_Wid.text(), self.Window.BorderColor, self.Window.BorderRad.text(),
                            self.Window.R_Top.isChecked(), self.Window.R_Left.isChecked(), self.Window.R_Right.isChecked(),
                            self.Window.R_Bottom.isChecked(), self.Window.color)#input every information into class
            elif(self.Window.B_Background.int==1):
                label.setup(text,
                            "<" + self.Window.Size.currentText() + ">" + HtmlCoding(self.Window.Text.toPlainText(),
                                                                                    self.Window.list) + "</" + self.Window.Size.currentText() + ">",
                            self.Window.textlist,
                            self.Window.Size.currentText(), self.Window.C_Font.currentText().split(" (")[0],
                            self.Window.Height.text(), self.Window.Width.text(), self.Window.B_Background,
                            self.Window.backgroundImage,
                            self.Window.RepeatX.isChecked(), self.Window.RepeatY.isChecked(),
                            self.Window.C_Align.currentText(),
                            self.Window.padding_2.text(), self.Window.Margin.text(),
                            self.Window.C_BorderStyle.currentText(),
                            self.Window.Border_Wid.text(), self.Window.BorderColor, self.Window.BorderRad.text(),
                            self.Window.R_Top.isChecked(), self.Window.R_Left.isChecked(),
                            self.Window.R_Right.isChecked(),
                            self.Window.R_Bottom.isChecked(), self.Window.color)  # input every information into class
            else:
                label.setup(text,
                            "<" + self.Window.Size.currentText() + ">" + HtmlCoding(self.Window.Text.toPlainText(),
                                                                                    self.Window.list) + "</" + self.Window.Size.currentText() + ">",
                            self.Window.textlist,
                            self.Window.Size.currentText(), self.Window.C_Font.currentText().split(" (")[0],
                            self.Window.Height.text(), self.Window.Width.text(), self.Window.B_Background,
                            self.Window.background,
                            self.Window.RepeatX.isChecked(), self.Window.RepeatY.isChecked(),
                            self.Window.C_Align.currentText(),
                            self.Window.padding_2.text(), self.Window.Margin.text(),
                            self.Window.C_BorderStyle.currentText(),
                            self.Window.Border_Wid.text(), self.Window.BorderColor, self.Window.BorderRad.text(),
                            self.Window.R_Top.isChecked(), self.Window.R_Left.isChecked(),
                            self.Window.R_Right.isChecked(),
                            self.Window.R_Bottom.isChecked(), self.Window.color)  # input every information into class
            return label
        else:
            return False




class MySearchColor(QtWidgets.QDialog):
    def __init__(self):
        QtWidgets.QDialog.__init__(self)
        self.Window = Ui_SearchingColor()
        self.Window.setupUi(self)
        self.Window.pushButton.clicked.connect(self.clicked)

    def Repersent(self, From):
        self.show()

        self.Window.From = From
        self.exec_()

    def clicked(self):
        self.Window.From.name = self.Window.list[self.Window.comboBox.currentIndex()].name#change the attributes of variable color from
        self.Window.From.html = self.Window.list[self.Window.comboBox.currentIndex()].html

        self.close()


class MyListWidget(QtWidgets.QListWidget):
    def __init__(self, parent,window):
        super().__init__(parent)
        self.setDragEnabled(True)
        self.menu=QtWidgets.QMenu()
        self.MyWindow=window


    def mouseMoveEvent(self, e):#when mouse move
        if e.buttons() == QtCore.Qt.LeftButton:
            mimeData = QtCore.QMimeData()
            mimeData.setText(self.currentItem().text())
            drag = QtGui.QDrag(self)#get drag variable from this widget
            drag.setMimeData(mimeData)
            drag.setHotSpot(e.pos() - self.rect().topLeft())#set position of drag pixmap
            drag.exec_(QtCore.Qt.MoveAction)#start the drag and drop system





class MyCanvas(QtWidgets.QScrollArea):
    def __init__(self, parent, window):
        super().__init__(parent)
        self.setAcceptDrops(True)
        self.MyWindow = window
        self.menu=QtWidgets.QMenu()
    def mouseMoveEvent(self,e):
        y = self.verticalScrollBar().value()
        x=self.horizontalScrollBar().value()
        if e.buttons() == QtCore.Qt.LeftButton and self.MyWindow.B_Drag==False:
            widget=self.widget()
            Layout=self.layout()
            index=-1
            if widget.childAt(e.pos()).__str__()!="None":
                position=QtCore.QPoint(x+e.pos().x(),y+e.pos().y())#the mouse position + the scrolled distance
                index=self.MyWindow.linkedList.find(widget.childAt(position))
            if(index!=-1):
                self.MyWindow.B_Drag=True
                self.MyWindow.dragIndex=index#get the dragged index
                self.setCursor(QtCore.Qt.CursorShape.DragMoveCursor)# change the cursor format to drag


    def GetInsertIndex(self,y):
        self.changeMidLineList()#update the list of mid lines of widgets
        for i in range(len(self.MyWindow.centralLineList)):
            if self.MyWindow.centralLineList[i] > y:#if the mid line of the widgets on the bottom of the y position then return the index ot=n the top of that
                return i-1
        return len(self.MyWindow.centralLineList)-1
    def LayoutClear(self):
        layout=self.MyWindow.Layout
        for i in reversed(range(layout.count())):#clean all the widgets in the layout
            item = layout.itemAt(i)
            layout.removeItem(item)
    def copy(self):#load all the widgets in the linked list in the canvas
        temp=self.MyWindow.linkedList.head
        while(temp!=False):
            self.MyWindow.Layout.insertWidget(self.MyWindow.Layout.count(),temp.content)
            temp=temp.next
    def mousePressEvent(self,e):

        y = self.verticalScrollBar().value()
        x=self.horizontalScrollBar().value()
        if e.buttons() == QtCore.Qt.RightButton:#if mouse right clecked
            widget=self.widget()
            Layout=self.layout()
            index=-1
            position=QtCore.QPoint(x+e.pos().x(),y+e.pos().y())#get the real position of mouse in the canvas, then get the information of the widgets it pressed
            if widget.childAt(position).__str__()!="None":
                index=self.MyWindow.linkedList.find(widget.childAt(position))
                node=self.MyWindow.linkedList.get(index)
                if(self.menu.isHidden()):
                    self.menu.clear()
                    Coding=self.menu.addAction("show coding")
                    if(node.node.link.File!="default"):
                        Link=self.menu.addAction("get link")
                    Delete=self.menu.addAction("delete")
                    quitAct = self.menu.addAction("Quit")
                    action = self.menu.exec_(self.mapToGlobal(e.pos()))
                    if action == quitAct:
                        self.hide()
                    elif action ==Coding:
                        print(node.node.coding)#show the html codings
                    elif (node.node.link.File!="default") and action==Link:
                        print(node.node.link.text)#if there is link it will be printed
                    elif action==Delete:

                        self.LayoutClear()#delete every widgets in the layout
                        self.MyWindow.linkedList.delete(index)#delete from the linked list
                        node.content.hide()
                        self.copy()



    def mouseReleaseEvent(self, e):
        y = self.verticalScrollBar().value()
        x=self.horizontalScrollBar().value()
        i=self.GetInsertIndex(e.pos().y()+y)
        if self.MyWindow.B_Drag:# if there is something being draged then drop it
            index=self.MyWindow.dragIndex
            if index<i:
                self.LayoutClear()#clear canvas firstly
                node=self.MyWindow.linkedList.get(index)
                self.MyWindow.linkedList.delete(index)#delete it from the list firstly then insert it to the position it droped
                self.MyWindow.linkedList.insert(i-1,node)#the widget is on the top of the dropping position so that insert in i
                self.copy()
                self.MyWindow.B_Drag=False
            elif i<index:
                self.LayoutClear()
                node = self.MyWindow.linkedList.get(index)
                self.MyWindow.linkedList.delete(index)
                self.MyWindow.linkedList.insert(i,node)

                self.copy()
                self.MyWindow.B_Drag=False
            self.unsetCursor()








    def dragEnterEvent(self, e):

        if e.mimeData().hasFormat('text/plain'):#if it is text then accept
            e.accept()
        else:
            e.ignore()

    def dropEvent(self, e):
        y=self.verticalScrollBar().value()
        i=self.GetInsertIndex(e.pos().y()+y)#get the index of droping
        if (e.mimeData().text() == "paragraph"):
            if (not self.MyWindow.BParagraph):#BParagraph is False when paragraph window have never been created
                self.MyWindow.paragraph = MyParagraph(self.MyWindow.MysearchColor,self.MyWindow.NAME)#create the dialog
                Information('The HTML <p> element defines a paragraph. A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph. style=""are after <p and before >')
                paragraph=self.MyWindow.paragraph.GetParagraph()#get the widget
                if(paragraph!=False):#if finish button is pressed
                    node=nodes()
                    node.node=paragraph#set widget as a node but label as content(allow for showing)
                    node.content=paragraph.Label
                    node.next=False
                    self.MyWindow.linkedList.insert(i,node)#insert the node in the list
                    self.MyWindow.Layout.insertWidget(i+1,node.content)#insert the content in the canvas

                self.MyWindow.BParagraph = True#set it to be True, allow for directly calling next time

            else:
                self.MyWindow.paragraph.Window.clear()#clear the information left
                paragraph = self.MyWindow.paragraph.GetParagraph()
                if(paragraph!=False):
                    node = nodes()
                    node.node = paragraph
                    node.content = paragraph.Label
                    self.MyWindow.linkedList.insert(i,node)
                    self.MyWindow.Layout.insertWidget(i+1,node.content)
        elif (e.mimeData().text() == "heading"):#same
            if (not self.MyWindow.BHeading):
                self.MyWindow.heading = MyHeading(self.MyWindow.MysearchColor,self.MyWindow.NAME)
                Information('HTML headings are titles or subtitles that you want to display on a webpage.\nHTML headings are defined with the <h1> to <h6> tags.\n<h1> defines the most important heading. <h6> defines the least important heading.style=""are after <hn and before >')
                heading=self.MyWindow.heading.GetHeading()
                if heading!=False:
                    node=nodes()
                    node.node=heading
                    node.content=heading.Label
                    node.next=False
                    self.MyWindow.linkedList.insert(i,node)
                    self.MyWindow.Layout.insertWidget(i+1,node.content)
                self.MyWindow.BHeading = True
            else:
                self.MyWindow.heading.Window.clear()
                heading = self.MyWindow.heading.GetHeading()
                if heading!=False:
                    node = nodes()
                    node.node = heading
                    node.content = heading.Label
                    self.MyWindow.linkedList.insert(i,node)
                    self.MyWindow.Layout.insertWidget(i+1,node.content)
        elif (e.mimeData().text() == "picture"):
            if (not self.MyWindow.BPicture):
                self.MyWindow.picture = MyPicture(self.MyWindow.NAME)
                Information('<img src="SOURCE ADDRESS">')
                picture=self.MyWindow.picture.getPicture()
                if picture!=False:
                    node=nodes()
                    node.node=picture
                    node.content=picture.Label
                    node.next=False
                    self.MyWindow.linkedList.insert(i,node)
                    self.MyWindow.Layout.insertWidget(i+1,node.content)
                self.MyWindow.BPicture = True
            else:
                self.MyWindow.picture.Window.clear()
                picture=self.MyWindow.picture.getPicture()
                if picture!=False:
                    node=nodes()
                    node.node=picture
                    node.content=picture.Label
                    node.next=False
                    self.MyWindow.linkedList.insert(i,node)
                    self.MyWindow.Layout.insertWidget(i+1,node.content)
        elif (e.mimeData().text() == "video"):
            if (not self.MyWindow.BVideo):
                self.MyWindow.videoWin=MyVideo(self.MyWindow.NAME)
                Information(
                    'gramma is <video width="320" height="240" controls>\n<source src="SOURCE ADDRESS" type="video/mp4">\n</video>.If height and width are not set, the page might flicker while the video loads. ')
                video=self.MyWindow.videoWin.getVideo()
                if video!=False:
                    node=nodes()
                    node.node=video
                    node.content=video.Label
                    node.next=False
                    self.MyWindow.linkedList.insert(i,node)
                    self.MyWindow.Layout.insertWidget(i+1,node.content)
                self.MyWindow.BVideo = True
            else:
                self.MyWindow.videoWin.Window.clear()
                video = self.MyWindow.videoWin.getVideo()
                if video != False:
                    node = nodes()
                    node.node = video
                    node.content = video.Label
                    node.next = False
                    self.MyWindow.linkedList.insert(i, node)
                    self.MyWindow.Layout.insertWidget(i + 1, node.content)
        elif (e.mimeData().text() == "audio"):
            if (not self.MyWindow.BAudio):
                self.MyWindow.audioWin=MyAudio(self.MyWindow.NAME)
                Information('gramma is <GAP audio controls" >" \n<source GAP src="SOURCE ADDRESS" type="audio/mpeg">\n</audio>')
                audio=self.MyWindow.audioWin.getVideo()
                if audio!=False:
                    node=nodes()
                    node.node=audio
                    node.content=audio.Label
                    node.next=False
                    self.MyWindow.linkedList.insert(i,node)
                    self.MyWindow.Layout.insertWidget(i+1,node.content)
                self.MyWindow.BAudio = True
            else:
                self.MyWindow.audioWin.Window.clear()
                audio=self.MyWindow.audioWin.getPicture()
                if audio != False:
                    node = nodes()
                    node.node = audio
                    node.content = audio.Label
                    node.next = False
                    self.MyWindow.linkedList.insert(i, node)
                    self.MyWindow.Layout.insertWidget(i + 1, node.content)
        elif(e.mimeData().text()=="link"):
            if(not self.MyWindow.BLink):
                Information('" <GAP a href="URL OF LINK" " ">"  link text</a>" ')
                self.MyWindow.link=MyLink(self.MyWindow.NAME)
                widget = self.widget()
                Layout = self.layout()
                index = -1
                if widget.childAt(e.pos()).__str__() != "None":#which widget it dragged to
                    index = self.MyWindow.linkedList.find(widget.childAt(e.pos()))
                    if (self.MyWindow.linkedList.get(index).node.type not in ["video","audio"]):#these two cannot be linked to a website
                        addLink(self.MyWindow.linkedList.get(index),self.MyWindow.link.getLink())#link them

                self.MyWindow.BLink = True

            else:
                self.MyWindow.classWin.Window.clear()
                widget = self.widget()
                Layout = self.layout()
                index = -1
                if widget.childAt(e.pos()).__str__() != "None":
                    index = self.MyWindow.linkedList.find(widget.childAt(e.pos()))
                    if (self.MyWindow.linkedList.get(index).node.type != "video"):
                        addLink(self.MyWindow.linkedList.get(index), self.MyWindow.link.getLink())

        elif (e.mimeData().text() == "class"):
            if (not self.MyWindow.BClass):
                Information("To create a class; write a period (.) character, followed by a class name. Then, define the CSS properties within curly braces {}")
                self.MyWindow.classWin = MyClass(self.MyWindow.MysearchColor,self.MyWindow.NAME)
                Class = self.MyWindow.classWin.GetClassNode()
                if Class != False:
                    node = nodes()
                    node.node = Class
                    node.content = Class
                    node.next = False
                    self.MyWindow.ClassList.add(node)
                    self.MyWindow.listWidget.addItem(Class.Name)
                self.MyWindow.BClass = True

            else:
                self.MyWindow.classWin.Window.clear()
                Class = self.MyWindow.classWin.GetClassNode()
                if Class != False:
                    node = nodes()
                    node.node = Class
                    node.content = Class
                    node.next = False
                    self.MyWindow.ClassList.add(node)
                    self.MyWindow.listWidget.addItem(Class.Name)
        elif (e.mimeData().text() == "text file"):
            if (not self.MyWindow.BTextFile):
                if(not self.MyWindow.BClass):
                    self.MyWindow.classWin = MyClass(self.MyWindow.MysearchColor,self.MyWindow.NAME)
                    self.MyWindow.BClass=True
                self.MyWindow.textFileWin=MyTextWin(self.MyWindow,self.MyWindow.NAME)
                Label=self.MyWindow.textFileWin.getLabel()
                if Label != False:
                    node = nodes()
                    node.node = Label
                    node.content = Label.Label
                    node.next = False
                    self.MyWindow.linkedList.insert(i, node)
                    self.MyWindow.Layout.insertWidget(i + 1, node.content)
                self.MyWindow.BTextFile = True

            else:
                self.MyWindow.textFileWin.Window.clear()
                Label = self.MyWindow.textFileWin.getLabel()
                if Label != False:
                    node = nodes()
                    node.node = Label
                    node.content = Label.Label
                    node.next = False
                    self.MyWindow.linkedList.insert(i, node)
                    self.MyWindow.Layout.insertWidget(i + 1, node.content)


        else:
            temp=self.MyWindow.ClassList.head
            while(temp!=False) and (temp.node.Name!=e.mimeData().text()):
                temp=temp.next
            if(temp.node.Name==e.mimeData().text()):
                if (not self.MyWindow.BString):
                    self.MyWindow.StringWin = MyString()
                    Information('it is set to be <p class="CLASS NAME"> TEXT<\p>')
                    Label = self.MyWindow.StringWin.GetParagraph(temp.node)
                    if Label != False:
                        node = nodes()
                        node.node = Label
                        node.content = Label.Label
                        node.next = False
                        self.MyWindow.linkedList.insert(i, node)
                        self.MyWindow.Layout.insertWidget(i + 1, node.content)
                    self.MyWindow.BString = True
                else:
                    self.MyWindow.StringWin.Window.clear()
                    Label = self.MyWindow.StringWin.GetParagraph(temp.node)
                    if Label != False:
                        node = nodes()
                        node.node = Label
                        node.content = Label.Label
                        node.next = False
                        self.MyWindow.linkedList.insert(i, node)
                        self.MyWindow.Layout.insertWidget(i + 1, node.content)



    def changeMidLineList(self):
        self.MyWindow.centralLineList=[]
        node=self.MyWindow.linkedList.head
        while(node!=False):
            self.MyWindow.centralLineList.append(node.content.y()+node.content.height()//2)
            node=node.next





class Ui_MainWindow(object):
    def setupUi(self, MainWindow,name):
        ###############################
        self.ClassList=linkedList()#for classes
        self.linkedList=linkedList()#for widgets
        self.dragIndex=0
        self.B_Drag=False
        self.centralLineList=[]#for central line of widgets
        self.BParagraph = False
        self.MysearchColor = MySearchColor()#it will be used in different dialog, so that creating firsly will be more efficient
        self.BHeading=False#for the boolean which stand for have the dialog been created or not
        self.BClass=False
        self.BString=False
        self.BLink=False
        self.BTextFile=False
        self.BPicture=False
        self.BVideo=False
        self.BAudio=False
        self.NAME=name#name for the project

        ###############################
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(808, 643)
        self.centralwidget = MainWindow
        self.listWidget = MyListWidget(self.centralwidget,self)
        self.listWidget.setGeometry(QtCore.QRect(10, 40, 141, 501))
        self.listWidget.setObjectName("listWidget")
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        self.listWidget.addItem("link")
        self.listWidget.addItem("video")
        self.listWidget.addItem("audio")


        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(660, 570, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(540, 570, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 20, 72, 15))
        self.label.setObjectName("label")
        self.Title = QtWidgets.QLineEdit(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(170, 20, 181, 21))
        self.Title.setObjectName("Title")
        self.canvas = MyCanvas(self.centralwidget, self)
        self.canvas.setGeometry(QtCore.QRect(170, 40, 581, 501))
        self.canvas.setWidgetResizable(True)
        self.canvas.setObjectName("canvas")


        self.scrollAreaWidgetContents = QtWidgets.QWidget()

        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 579, 499))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.canvas.setWidget(self.scrollAreaWidgetContents)

        self.Layout=QtWidgets.QVBoxLayout()


        self.scrollAreaWidgetContents.setLayout(self.Layout)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def Reading(self,textfile):#read textfile to get existed website using the reading for different classes
        handle=open(textfile,"r")
        self.Title.setText(handle.readline())
        text=(handle.read().replace("\n","")).split("###")
        for i in text:
            type=i.split("##@")[0]
            if type=="paragraph":
                paragraph=MyParagraphLabel()
                paragraph.Reading(i)
                node = nodes()
                node.node = paragraph
                node.content = paragraph.Label
                node.next = False
                self.linkedList.add( node)
                self.Layout.addWidget(node.content)
            elif type=="heading":
                heading=MyHeadingLabel()
                heading.Reading(i)
                node = nodes()
                node.node = heading
                node.content = heading.Label
                node.next = False
                self.linkedList.add(node)
                self.Layout.addWidget(node.content)
            elif type=="class":
                Class=ClassWin()
                Class.Reading(i)
                node = nodes()
                node.node = Class
                node.content = Class
                node.next = False
                self.ClassList.add(node)
                self.listWidget.addItem(Class.Name)
            elif type=="classLabel":
                Label=ClassLabel()
                Label.Reading(i)
                node = nodes()
                node.node = Label
                node.content = Label.Label
                node.next = False
                self.linkedList.add(node)
                self.Layout.addWidget(node.content)
            elif type=="textFileLabel":
                Label = ClassLabel()
                Label.Reading(i)
                node = nodes()
                node.node = Label
                node.content = Label.Label
                node.next = False
                self.linkedList.add(node)
                self.Layout.addWidget(node.content)
            elif type=="picture":
                picture=Picture()
                picture.Reading(i)
                node = nodes()
                node.node = picture
                node.content =picture.Label
                node.next = False
                self.linkedList.add(node)
                self.Layout.addWidget(node.content)
            elif type=="video":
                video=Video()
                video.Reading(i)
                node = nodes()
                node.node = video
                node.content = video.Label
                node.next = False
                self.linkedList.add(node)
                self.Layout.addWidget(node.content)
            elif type=="audio":
                audio=Audio()
                audio.Reading(i)
                node = nodes()
                node.node = audio
                node.content = audio.Label
                node.next = False
                self.linkedList.add(node)
                self.Layout.addWidget(node.content)





    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(0)
        item.setText(_translate("MainWindow", "paragraph"))
        item = self.listWidget.item(1)
        item.setText(_translate("MainWindow", "picture"))
        item = self.listWidget.item(2)
        item.setText(_translate("MainWindow", "text file"))
        item = self.listWidget.item(3)
        item.setText(_translate("MainWindow", "class"))
        item = self.listWidget.item(4)
        item.setText(_translate("MainWindow", "heading"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("MainWindow", "finish"))
        self.pushButton_2.setText(_translate("MainWindow", "cancel"))
        self.label.setText(_translate("MainWindow", "title:"))
